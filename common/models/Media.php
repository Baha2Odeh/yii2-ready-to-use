<?php

namespace common\models;

use Yii;
use yii\web\UploadedFile;

/**
 * This is the model class for table "{{%media}}".
 *
 * @property int $id
 * @property string $type
 * @property string $name
 * @property string $path
 * @property string $extension
 * @property double $size
 * @property int $status
 * @property string $created_at
 * @property int $created_by
 * @property string $updated_at
 * @property int $updated_by
 * @property int $is_deleted
 * @property string $deleted_at
 * @property int $deleted_by
 *
 * @property User $createdBy
 * @property User $updatedBy
 * @property User $deletedBy
 */
class Media extends ActiveRecord
{
    CONST TYPE_IMAGE = 'image';
    CONST TYPE_VIDEO = 'video';

    CONST STATUS_ACTIVE = 1;
    CONST STATUS_INACTIVE = 0;



    /** @var UploadedFile */
    public $file;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%media}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['type', 'name', 'path', 'extension', 'size'], 'required'],
            [['type', 'name', 'path', 'extension'], 'string'],
            [['size'], 'number'],
            [['is_active'],'default','value' => self::STATUS_ACTIVE],
            [['is_active', 'created_by', 'updated_by'], 'integer'],


            [['file'],'file','skipOnEmpty' => true,'extensions' => 'jpg,png,gif,mp4,wav','maxSize' => 1024 * 1024 * 10,'tooBig' => Yii::t('app','Max Size Is 10MB')],

            //[['created_at', 'updated_at','deleted_at'], 'safe'],
            //[['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['created_by' => 'id']],
            //[['updated_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['updated_by' => 'id']],
            //[['deleted_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['updated_by' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('attribute', 'ID'),
            'type' => Yii::t('attribute', 'Type'),
            'name' => Yii::t('attribute', 'Name'),
            'path' => Yii::t('attribute', 'Path'),
            'extension' => Yii::t('attribute', 'Extension'),
            'size' => Yii::t('attribute', 'Size'),
            'is_active' => Yii::t('attribute', 'is_active'),
            'created_at' => Yii::t('attribute', 'Created At'),
            'created_by' => Yii::t('attribute', 'Created By'),
            'updated_at' => Yii::t('attribute', 'Updated At'),
            'updated_by' => Yii::t('attribute', 'Updated By'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'created_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUpdatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'updated_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDeletedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'deleted_by']);
    }

    public function getUrl(){
        return rtrim(Yii::$app->params['urls']['cdn'], "/") . '/' . ltrim($this->path, "/");
    }
    public function getThumb($size=ImagePreset::TYPE_THUMB){
        return Yii::$app->imageCache->url($this,$size);
    }

    public function fields()
    {
        $fields =  parent::fields(); // TODO: Change the autogenerated stub
        $fields[] = 'url';
        $fields[] = 'thumb';
        return $fields;
    }
}
